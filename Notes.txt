Dart :
 
Data type :- It defines size and type of the data.

Types :-  
1. int (for no s.)
2. double (for floating point no.)
3. string (for alpha numeric value) (Are always represent in " " .)
4. bool (for boolen type values - True / False)
5. list (for large amount of data like array)
6. map (for data in key and value format)

Comments :- single (//)
                     multi line (/*...............*/)

Operators :-  Operators are used to performs operations b/w two or more operands
In dart 6 types of operators:
1. Arithmetic operator : Are used to perform arithmetic operations b/w two or more operands.
2. Relation operator : Are used to check the relation (condition) b/w two or more operands.
                                Are always return the boolean type result.(True / False)
3. Logical operator
4. Assignment operator
5. Conditional operator
6. Typeof / Type text operator : as , is and is!

Loops :-  for(initialization;condition;updation)
               {
                      Statement.
               }
              for(int i=1;i<=3;i++)
              {
               print(i);
              }  

User input : First import dart standard input output library(import 'dart:io';)

Function :- Fnx is a way to achieve any task in dart programming language. 
                 Syntax - return_type name_of_fn(arguments if any)
                              {

                               } 

OOPs :- It is  just a concept.
Features: 
1. Class: It is just a template , in other word class is a collections of variables , methods(functions) and constructors.
2. Object: It is a real world entity.
3. Inheritance
4. Polymorphism 
5. Abstraction
6. Encapsulation

Constructor :- It is a special type of member funciton.
It's name same as it's class name.
It's have no any return type.
You cannot call the constructor manually it will we call automatically at a time object creation.
Types :-
1. Default constructor
2. Named constructor 
   syntax: class_name.any_name()
               {

               }	
3. Parameterized constructor

Inheritance :- Is a way to resuse any code inside another code.
Types:
1. Single level Inh.
2. Multi level Inh.
3. Hierarchical Inh.
4. Multiple Inh.(not supported by dart)
5. Hybrid Inh.(not supported by dart)
Note: If you want inherit any code inside another code so you must be used 'extends' keyword.

Polymorphism : Polymorphism are contains two words : 'Poly' means "many" and 'morphism' means "form".
Function overriding are represent the Polymorphism concept in dart.
Function overriding : If you want to achieve fun overriding concept so you must be follow some rules :
1. Fun name must be same in both class.
2. Return type are also same.
3. And parameters are also same as parent class function.
4. overriding are always perform in case of Inheritance.

Abstraction : Abstraction are used to hide the complexity and show the functionality of code.
1. If you want to achieve the functionality of Abstraction so you must be use 'abstract' keyword.
2. It is always used with class.
3. In case of abstract class you don't need to provide function body (define).

List : List is the collections of objects.
Types : 
1. Sized List
2. Dymanic List : In case of dyanamic list , we don't need to provide the length of list.

Map : Map are always store data into key and value format.

Assignment_1 :- Print the table of 2.

Assignment_2 :- Num is even or odd?

Assignment_3 :- Value is  capital , small , number or symbol?

Assignment_4 :- WAP to get input child age and if age is from 1 to 5, so print "go to counter number 1 for polio drop" 
and if age is 5 and less than 10, so print "go to counter no.2 for vaccination"
and if age greater than 10 and less than 15, so output is "go to counter no.3 for vitamins and minerals" 
and if age is greater than 15 then output is "invalid".

Assignment_5 :- WAP to write a story till the user cannot type 'stop' . if user type 'stop' then program will end.

Assignment_6 :- WAP to get input 5 students details and print it. 

Assignment_7 :- WAP to define any list and get input ids and search one id.